#pragma checksum "D:\Github\FStudent\FStudent\Views\Shared\_SplitPage.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "22a950d8de13cdf0c361c62a43f02149da0c9dfa"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Shared__SplitPage), @"mvc.1.0.view", @"/Views/Shared/_SplitPage.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\Github\FStudent\FStudent\Views\_ViewImports.cshtml"
using FStudent;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Github\FStudent\FStudent\Views\_ViewImports.cshtml"
using FStudent.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"22a950d8de13cdf0c361c62a43f02149da0c9dfa", @"/Views/Shared/_SplitPage.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"ed57bce45706207250efc689fef20c172b31a2fd", @"/Views/_ViewImports.cshtml")]
    public class Views_Shared__SplitPage : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@"<script>
    function showPageScroll(pageIndex, pageCount) {
        s = ``;
        if (pageCount > 0) {
            if (pageIndex == 1) {
                s += `<li class=""page-item disabled"">
                                <a class=""page-link""><</a>
                            </li>`;
            }
            else {
                s += `<li class=""page-item"">
                                <a class=""page-link"" onclick=""goToPage(${pageIndex - 1});"" style=""cursor: pointer;""><</a>
                            </li>`;
            }
            if (pageCount <= 5) {
                for (var i = 1; i <= pageCount; i++) {
                    if (i != pageIndex) {
                        s += `<li class=""page-item""><a class=""page-link"" onclick=""goToPage(${i});"" style=""cursor: pointer;"">${i}</a></li>`;
                    }
                    else {
                        s += `<li class=""page-item active""><a class=""page-link"" onclick=""goToPage(${i});"" style=""cursor: pointer;"">${i}</a></li>`");
            WriteLiteral(@";
                    }

                }
            }
            else {
                var min = pageIndex - 2;
                var max = pageIndex + 2;
                while (min < 1) {
                    min++;
                    max++;
                }
                while (max > pageCount) {
                    min--;
                    max--;
                }
                if (min != 1) {
                    s += `<li class=""page-item""><a class=""page-link"" onclick=""goToPage(1);"" style=""cursor: pointer;"">1</a></li>`;
                    if (min > 2) {
                        s += `<li class=""page-item disabled""><div class=""page-link"">...</div></li>`;
                    }
                }
                for (var i = min; i <= max; i++) {
                    if (i != pageIndex) {
                        s += `<li class=""page-item""><a class=""page-link"" onclick=""goToPage(${i});"" style=""cursor: pointer;"">${i}</a></li>`;
                    }
                    else {");
            WriteLiteral(@"
                        s += `<li class=""page-item active""><a class=""page-link"" onclick=""goToPage(${i});"" style=""cursor: pointer;"">${i}</a></li>`;
                    }

                }
                if (max != pageCount) {
                    if (max < pageCount - 1) {
                        s += `<li class=""page-item disabled""><div class=""page-link"">...</div></li>`;
                    }
                    s += `<li class=""page-item""><a class=""page-link"" onclick=""goToPage(${pageCount});"" style=""cursor: pointer;"">${pageCount}</a></li>`;
                }
            }

            if (pageIndex == pageCount) {
                s += `<li class=""page-item disabled"">
                                <a class=""page-link"">></a>
                            </li>`;
            }
            else {
                s += `<li class=""page-item"">
                                <a class=""page-link"" onclick=""goToPage(${pageIndex + 1});"" style=""cursor: pointer;"">></a>
                            <");
            WriteLiteral("/li>`;\r\n            }\r\n        }\r\n        $(\'#splitPage\').html(s);\r\n    }\r\n</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
